openapi: 3.0.3
info:
  title: Boardgames
  version: 1.0.0
paths:
  /boardgames:
    get:
      summary: Get all boardgames
      operationId: getAllBoardGames
      parameters:
        - name: search
          in: query
          required: false
          description: "search in product name and description for some key words"
          schema:
            type: string
        - name: filter
          in: query
          required: false
          description: "
            For Filtering you have to URL encode a DTO in Json format. here's an example of possible DTO: 
            {
              \"manufacturers\":[\"Kosmos\"],
              \"minProductPrice\":90,
              \"maxProductPrice\":110,
              \"boardGameTypes\": [\"Стратегії\"],
              \"boardGameGenres\":[\"Сімейні\",\"Економіка\"],
              \"boardGameMechanics\":[\"Конструювання колоди\",\"Кооперативна гра\"],
              \"ageIntervals\":[\"10-13\",\"8-9\"],\"playerCounts\":[\"2\",\"3\",\"4\",\"5\"],
              \"minGameDuration\":30,\"maxGameDuration\":130,
              \"boardGameLanguages\":[\"Англійська\"]
            }
          "
          schema:
            type: string
        - name: sort
          in: query
          required: false
          description: "sort by: price (asc, desc), name (asc, desc), newest"
          schema:
              $ref: '#/components/schemas/SortType'
        - name: page
          in: query
          required: false
          description: "current page number"
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogResponseDto'
    post:
      summary: Add a new boardgame
      operationId: addBoardGame
      x-access-permission: boardGame:create
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Boardgame to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAndUpdateBoardGameDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGameDto'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
  /boardgames/{id}:
    get:
      summary: Get a boardgame by id
      operationId: getBoardGameById
      parameters:
        - name: id
          in: path
          description: ID of the boardgame
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGameDto'
        '404':
          description: Not Found
    put:
      summary: Update a boardgame
      operationId: updateBoardGame
      x-access-permission: boardGame:update
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the boardgame to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Boardgame to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAndUpdateBoardGameDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGameDto'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
    delete:
      summary: Delete a boardgame
      operationId: deleteBoardGame
      x-access-permission: boardGame:delete
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the boardgame to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '401':
          description: Unauthorized

  /boardgames/genres:
    get:
      summary: Get all genres
      operationId: getAllGenres
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardGameGenreDto'
    post:
      summary: Add a new genre
      operationId: addGenre
      x-access-permission: genreAndMechanic:create
      security:
        - bearerAuth: []
      requestBody:
        description: Genre to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAndUpdateBoardGameGenreDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGameGenreDto'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

  /boardgames/genres/{id}:
    get:
      summary: Get a genre by id
      operationId: getGenreById
      parameters:
        - name: id
          in: path
          description: ID of the genre
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGameGenreDto'
        '404':
          description: Not Found
    put:
      summary: Update a genre
      operationId: updateGenre
      x-access-permission: genreAndMechanic:update
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of the genre to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Genre to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAndUpdateBoardGameGenreDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGameGenreDto'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
    delete:
      summary: Delete a genre
      operationId: deleteGenre
      x-access-permission: genreAndMechanic:delete
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of the genre to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '401':
          description: Unauthorized

  /boardgames/mechanics:
    get:
      summary: Get all mechanics
      operationId: getAllMechanics
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardGameMechanicDto'
    post:
      summary: Add a new mechanic
      operationId: addMechanic
      x-access-permission: genreAndMechanic:create
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Mechanic to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAndUpdateBoardGameMechanicDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGameMechanicDto'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized

  /boardgames/mechanics/{id}:
    get:
      summary: Get a mechanic by id
      operationId: getMechanicById
      parameters:
        - name: id
          in: path
          description: ID of the mechanic
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGameMechanicDto'
        '404':
          description: Not Found
    put:
      summary: Update a mechanic
      operationId: updateMechanic
      x-access-permission: genreAndMechanic:update
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of the mechanic to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Mechanic to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAndUpdateBoardGameMechanicDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGameMechanicDto'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
    delete:
      summary: Delete a mechanic
      operationId: deleteMechanic
      x-access-permission: genreAndMechanic:delete
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of the mechanic to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
        '401':
          description: Unauthorized
  /boardgames/archived/:
    get:
      summary: get all archived boardgames
      operationId: getAllArchivedBoardGames
      x-access-permission: boardGame:readArchived
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BoardGameSummaryDto'
  /boardgames/archive/{id}:
    put:
      summary: archive board game
      operationId: archiveBoardGame
      x-access-permission: boardGame:archiveAndUnarchive
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of the board game to archive
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGameDto'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
  /boardgames/unarchive/{id}:
    put:
      summary: unarchive board game
      operationId: unarchiveBoardGame
      x-access-permission: boardGame:archiveAndUnarchive
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: ID of the board game to unarchive
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGameDto'
        '404':
          description: Not Found
        '401':
          description: Unauthorized
  /boardgames/{id}/image:
    post:
      summary: Upload an image for a specific boardgame
      operationId: uploadAndAddImage
      x-access-permission: boardGame:create
      security:
          - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the boardgame to which the image will be associated
          schema:
            type: integer
            format: int64
      requestBody:
        description: The image to upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Image uploaded and associated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardGameDto'
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Boardgame not found
  /boardgames/images/{filename}:
    get:
      summary: Retrieve a specific image for a board game
      operationId: getBoardGameImage
      parameters:
        - name: filename
          in: path
          required: true
          description: The filename of the image to retrieve (e.g., "1.png")
          schema:
            type: string
      responses:
        '200':
          description: Image retrieved successfully
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/jpg:
              schema:
                type: string
                format: binary
        '400':
          description: Bad Request
        '404':
          description: Boardgame or Image not found
  /boardgames/priceBounds:
    get:
      deprecated: true
      summary: Get min and max price from all games
      operationId: getPriceBounds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinMaxDto'
  /boardgames/gameDurationBounds:
    get:
      deprecated: true
      summary: Get min and max game durations from all games
      operationId: getGameDurationBounds
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MinMaxDto'
  /boardgames/filteringData:
    get:
      summary: Get all filtering data
      operationId: getFilteringData
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterDataDto'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    CatalogResponseDto:
      type: object
      properties:
        emptyValue:
          type: boolean

    BoardGameSummaryDto:
      type: object
      properties:
        emptyValue:
          type: boolean

    BoardGameDto:
      type: object
      properties:
        emptyValue:
          type: boolean

    CreateAndUpdateBoardGameDto:
      type: object
      properties:
        emptyValue:
          type: boolean

    BoardGameGenreDto:
      type: object
      properties:
        emptyValue:
          type: boolean

    CreateAndUpdateBoardGameGenreDto:
      type: object
      properties:
        emptyValue:
          type: boolean

    BoardGameMechanicDto:
      type: object
      properties:
        emptyValue:
          type: boolean

    CreateAndUpdateBoardGameMechanicDto:
      type: object
      properties:
        emptyValue:
          type: boolean

    SortType:
      enum:
        - price_asc
        - price_desc
        - name_asc
        - name_desc
        - newest

    MinMaxDto:
      type: object
      properties:
        emptyValue:
          type: boolean

    FilterDataDto:
      type: object
      properties:
        emptyValue:
          type: boolean


