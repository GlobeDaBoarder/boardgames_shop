openapi: 3.0.3
info:
  title: ShoppingCart API
  version: 1.0.0
security:
  - bearerAuth: []
paths:
  /shoppingCart/map:
    post:
      summary: Map cart from one stored in local storage to one stored in database
      operationId: mapCart
      x-access-permission: shoppingCart:manageMe
      description: "This operation is used when a decides to log in or register. 
      Prior to registration or logging in all the shopping cart dat ais stored inside of localStorage.
       Upon login,  this allows to save client's products in the database and clear the localStorage"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/MapProductInCartCartDto'
      responses:
        '200':
          description: Cart mapped successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInShoppingCartDto'
        '400':
          description: Invalid cart data
        '404':
          description: Product not found
        '401':
          description: Unauthorized


  # admin/moderator operations
  /shoppingCart/{cartId}:
    get:
      deprecated: true
      summary: Get all products in the shopping cart
      operationId: getProductsInShoppingCart
      x-access-permission: shoppingCart:read
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Products in the shopping cart
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInShoppingCartDto'
        '400':
          description: Invalid shopping cart ID

  # my user operations / currently logged-in user operations
  /shoppingCart/:
    delete:
      summary: Clear all items from my shopping cart
      operationId: clearMyShoppingCart
      x-access-permission: shoppingCart:manageMe
      responses:
        '204':
          description: Shopping cart cleared successfully
        '401':
          description: Unauthorized

    get:
      summary: Get all products in my shopping cart
      operationId: getProductsInMyShoppingCart
      x-access-permission: shoppingCart:read
      responses:
        '200':
          description: Products in the shopping cart
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInShoppingCartDto'
        '401':
          description: Unauthorized

  /shoppingCart/{productId}:
    post:
      summary: Adds a product to the shopping cart
      operationId: addProductToMyShoppingCart
      x-access-permission: shoppingCart:manageMe
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product added successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInShoppingCartDto'
        '404':
          description: Product not found
        '401':
          description: Unauthorized

  /shoppingCart/{productInCartId}:
    delete:
      summary: Remove a product from the shopping cart
      operationId: removeProductFromMyShoppingCart
      x-access-permission: shoppingCart:manageMe
      parameters:
        - in: path
          name: productInCartId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product removed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInShoppingCartDto'
        '404':
          description: ProductInCart not found
        '401':
          description: Unauthorized

    patch:
      summary: Update the quantity of a product in the shopping cart
      operationId: updateQuantityOfProductInMyShoppingCart
      x-access-permission: shoppingCart:manageMe
      parameters:
        - in: path
          name: productInCartId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQuantityOfProductInShoppingCartDto'
      responses:
        '200':
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInShoppingCartDto'
        '404':
          description: ProductInCartId not found
        '401':
          description: Unauthorized

  /shoppingCart/checkout/{addressId}:
    post:
      summary: Checkout the shopping cart and create an order for registered user
      operationId: checkoutRegisteredUser
      x-access-permission: shoppingCart:manageMe
      parameters:
        - in: path
          name: addressId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '400':
          description: Invalid checkout request
        '404':
          description: Shopping cart or address not found
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ProductInShoppingCartDto:
      type: object
      properties:
        emptyValue:
          type: string

    UpdateQuantityOfProductInShoppingCartDto:
      type: object
      properties:
        emptyValue:
          type: string

    OrderDto:
      type: object
      properties:
        emptyValue:
          type: string

    MapProductInCartCartDto:
      type: object
      properties:
        emptyValue:
          type: string

