openapi: 3.0.3
info:
  title: ShoppingCart API
  version: 1.0.0
security:
  - bearerAuth: []
paths:
  # admin/moderator operations
  /shoppingCart/{cartId}:
    get:
      summary: Get all products in the shopping cart
      operationId: getProductsInShoppingCart
      x-access-permission: shoppingCart:read
      parameters:
        - in: path
          name: cartId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Products in the shopping cart
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInShoppingCartDto'
        '400':
          description: Invalid shopping cart ID

  # my user operations / currently logged-in user operations
  /shoppingCart/:
    delete:
      summary: Clear all items from my shopping cart
      operationId: clearMyShoppingCart
      x-access-permission: shoppingCart:manageMe
      responses:
        '200':
          description: Shopping cart cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartDto'
        '400':
          description: Invalid shopping cart ID
    get:
      summary: Get all products in my shopping cart
      operationId: getProductsInMyShoppingCart
      x-access-permission: shoppingCart:read
      responses:
        '200':
          description: Products in the shopping cart
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductInShoppingCartDto'
        '400':
          description: Invalid shopping cart ID
  /shoppingCart/{productId}:
    post:
      summary: Adds a product to the shopping cart
      operationId: addProductToMyShoppingCart
      x-access-permission: shoppingCart:manageMe
      parameters:
        - in: path
          name: productId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Product added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartDto'
        '400':
          description: Invalid product data
  /shoppingCart/{productInCartId}:
    delete:
      summary: Remove a product from the shopping cart
      operationId: removeProductFromMyShoppingCart
      x-access-permission: shoppingCart:manageMe
      parameters:
        - in: path
          name: productInCartId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Product removed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartDto'
        '400':
          description: Invalid product or shopping cart ID

    patch:
      summary: Update the quantity of a product in the shopping cart
      operationId: updateQuantityOfProductInMyShoppingCart
      x-access-permission: shoppingCart:manageMe
      parameters:
        - in: path
          name: productInCartId
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQuantityOfProductInShoppingCartDto'
      responses:
        '200':
          description: Product quantity updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartDto'
        '400':
          description: Invalid product data

#  /shoppingCart/checkout:
#    post:
#      summary: "Checkout the shopping cart and create an order for unregistered user. WARNING: \
#      this endpoint is not yet implemented."
#      operationId: checkoutUnregisteredUser
#      deprecated: true
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/AddAndUpdateAddressDto'
#      responses:
#        '501':
#            description: Not implemented
#        '201':
#          description: Order created successfully
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/OrderDto'
#        '400':
#          description: Invalid checkout request
#        '404':
#          description: Shopping cart not found

  /shoppingCart/checkout/{addressId}:
    post:
      summary: Checkout the shopping cart and create an order for registered user
      operationId: checkoutRegisteredUser
      x-access-permission: shoppingCart:manageMe
      parameters:
        - in: path
          name: addressId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '400':
          description: Invalid checkout request
        '404':
          description: Shopping cart or address not found
        '401':
          description: Unauthorized

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:

    UpdateQuantityOfProductInShoppingCartDto:
      type: object
      properties:
        quantity:
          type: integer
          format: int32
      required:
        - quantity

    ProductInShoppingCartDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
      required:
        - id
        - productId
        - quantity

    ShoppingCartDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        productsInShoppingCart:
          type: array
          items:
            $ref: '#/components/schemas/ProductInShoppingCartDto'
      required:
        - id
        - products

    OrderDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.response.OrderDto
      properties:
        id:
          type: integer
          format: int64
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
        userProfileId:
          type: integer
          format: int64
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/ProductInOrderDto'
        status:
          $ref: '#/components/schemas/OrderStatus'
        orderDate:
          type: string
          format: date-time
        totalPrice:
          type: number
          format: float
        address:
          $ref: '#/components/schemas/AddAndUpdateAddressDto'
        dateOrderPlaced:
          type: string
          format: date-time
        dateOrderDelivered:
          type: string
          format: date-time
        paymentStatus:
          $ref: '#/components/schemas/PaymentStatus'
    ProductInOrderDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.response.ProductInOrderDto
      properties:
        id:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32

    AddAndUpdateAddressDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.response.AddAndUpdateAddressDto
      properties:
        street:
          type: string
        houseNumber:
          type: string
        postalCode:
          type: string
        city:
          type: string
        country:
          type: string

    OrderStatus:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.model.OrderStatus
      properties:
        orderStatus:
          type: string
          enum:
            - PLACED
            - PROCESSING
            - ACCEPTED
            - IN_DELIVERY
            - DONE
            - CANCELLED
      required:
        - orderStatus

    PaymentStatus:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.model.PaymentStatus
      properties:
        paymentStatus:
          type: string
          enum:
            - PAID
            - UNPAID
      required:
        - paymentStatus

