openapi: 3.0.3
info:
  title: Order API
  version: 1.0.0
security:
  - bearerAuth: []
paths:
  # admin operations
  /orders:
    post:
      summary: Creates a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderDto'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '400':
          description: Invalid request
    get:
      summary: Retrieves a list of all orders
      x-access-permission: order:read
      operationId: getAllOrders
      responses:
        '200':
          description: Successfully retrieved orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDto'
  /orders/{orderId}:
    get:
      summary: Retrieves information about a specific order
      operationId: getOrderById
      x-access-permission: order:read
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the order
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '404':
          description: Order not found
        '401':
          description: Unauthorized
    patch:
      summary: Updates the status of an order
      description: use PROCESSING, ACCEPTED, IN_DELIVERY, DONE, CANCELLED as possible statuses
      operationId: updateOrderStatus
      x-access-permission: order:updateStatus
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the order
      requestBody:
        required: true
        description: PROCESSING, ACCEPTED, IN_DELIVERY, DONE, CANCELLED
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatus'
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '400':
          description: Invalid request
        '404':
          description: Order not found
        '401':
          description: Unauthorized
#    delete:
#      summary: deletes an order
#      operationId: deleteOrder
#      x-access-permission: order:delete
#      parameters:
#        - in: path
#          name: orderId
#          required: true
#          schema:
#            type: integer
#            format: int64
#          description: The ID of the order
#      responses:
#        '204':
#          description: Order deleted successfully
#        '404':
#          description: Order not found

  # user operations
  /orders/me:
    get:
      summary: Get all of my orders
      description: Retrieves a list of all orders placed by the currently logged-in user
      operationId: getMyOrders
      x-access-permission: order:readMe
      responses:
        '200':
          description: Successfully retrieved orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /orders/me/{orderId}:
    get:
      summary: Get a specific order of mine
      description: Retrieves information about a specific order placed by the currently logged-in user
      operationId: getMyOrderById
      x-access-permission: order:readMe
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the order
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderDto'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Order not found
    patch:
      summary: Cancel my order
      description: Cancels an order placed by the currently logged-in user
      operationId: cancelMyOrder
      x-access-permission: order:cancelMe
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: integer
            format: int64
          description: The ID of the order
      responses:
        '204':
          description: Order cancelled successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Order not found
  /orders/export:
    get:
      summary: Export orders data to Excel
      operationId: exportOrdersToExcel
      x-access-permission: order:export
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          required: true
          description:
            "Start date of the time range (format: yyyy-mm-dd)."
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: true
          description:
            "End date of the time range (format: yyyy-mm-dd)."
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Excel file containing the orders data
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid date format or date range


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SimpleProductInShoppingCartDto:
      type: object
      properties:
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
      required:
        - productId
        - quantity

    MapShoppingCartDto:
      type: object
      properties:
        simpleProductInShoppingCartDtos:
          type: array
          items:
            $ref: '#/components/schemas/SimpleProductInShoppingCartDto'
      required:
        - simpleProductInShoppingCartDtos

    CreateUserProfileDto:
      type: object
      properties:
        email:
          type: string
          format: email
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
      required:
        - email
        - phone
        - firstName
        - lastName


    CreateOrderDto:
      type: object
      properties:
        mapShoppingCartDto:
          $ref: '#/components/schemas/MapShoppingCartDto'
        addAndUpdateAddressDto:
          $ref: '#/components/schemas/AddAndUpdateAddressDto'
        userProfileDto:
          $ref: '#/components/schemas/CreateUserProfileDto'
      required:
        - mapShoppingCartDto
        - addAndUpdateAddressDto
        - userProfileDto

    AddAndUpdateAddressDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.request.AddAndUpdateAddressDto
      properties:
        street:
          type: string
        houseNumber:
          type: string
        postalCode:
          type: string
        city:
          type: string
        country:
          type: string
      required:
        - street
        - houseNumber
        - postalCode
        - city
        - country

    AddressDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.response.AddressDto
      properties:
        id:
          type: integer
          format: int64
        street:
          type: string
        houseNumber:
          type: string
        postalCode:
          type: string
        city:
          type: string
        country:
          type: string

    OrderDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.response.OrderDto
      properties:
        id:
          type: integer
          format: int64
        dateCreated:
          type: string
          format: date-time
        dateUpdated:
          type: string
          format: date-time
        userProfileId:
          type: integer
          format: int64
        orderItems:
          type: array
          items:
            $ref: '#/components/schemas/ProductInOrderDto'
        status:
            $ref: '#/components/schemas/OrderStatus'
        orderDate:
          type: string
          format: date-time
        totalPrice:
          type: number
          format: float
        address:
          $ref: '#/components/schemas/AddressDto'
        dateOrderPlaced:
          type: string
          format: date-time
        dateOrderDelivered:
          type: string
          format: date-time
        paymentStatus:
          $ref: '#/components/schemas/PaymentStatus'

    ProductInOrderDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.response.ProductInOrderDto
      properties:
        id:
          type: integer
          format: int64
        productId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
      required:
        - id
        - productId
        - quantity

    OrderStatus:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.model.OrderStatus
      properties:
        orderStatus:
          type: string
          enum:
            - PLACED
            - PROCESSING
            - ACCEPTED
            - IN_DELIVERY
            - DONE
            - CANCELLED
      required:
        - orderStatus

    PaymentStatus:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.model.PaymentStatus
      properties:
        paymentStatus:
          type: string
          enum:
            - PAID
            - UNPAID
