openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
paths:
  /users:
    get:
      summary: Get all users
      operationId: getAllUsersPublicInfo
      x-acess-permission: admin:read
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPublicDto'
    post:
      summary: Create a new user with specified roles
      operationId: createSpecifiedUser
      x-acess-permission: admin:write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAnyUserDto'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicDto'
  /users/customer:
    post:
      summary: Create a new customer user
      operationId: createCustomerUser
      x-acess-permission:  user:write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerUserDto'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicDto'
  /users/{userId}:
    get:
      summary: Get a user by ID
      operationId: getUserPublicInfoById
      x-acess-permission: admin:read
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicDto'
        '404':
          description: User not found
    delete:
      summary: Delete a user by ID
      operationId: deleteUser
      x-acess-permission: admin:write
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
  /users/{userId}/username:
    put:
      summary: Update a user's username
      operationId: updateUsername
      x-acess-permission: user:write
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUsernameDto'
      responses:
        '200':
          description: username updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicDto'
  /users/{userId}/password:
    put:
      summary: Update a user's password
      operationId: updatePassword
      x-acess-permission: user:write
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: password updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicDto'
  /users/{userId}/email:
    put:
      summary: Update a user's email
      operationId: updateEmail
      x-acess-permission: user:write
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmailDto'
      responses:
        '200':
          description: email updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicDto'
  /users/{userId}/phone:
    put:
      summary: Update a user's phone
      operationId: updatePhone
      x-acess-permission: user:write
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePhoneDto'
      responses:
        '200':
          description: phone number updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPublicDto'
  /users/{userId}/address:
    post:
      summary: Add an address to a user
      operationId: addAddress
      x-acess-permission: user:write
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddAndUpdateAddressDto'
      responses:
        '201':
          description: address added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddressDto'
  /users/{userId}/address/{addressId}:
#    put:
#      summary: Update a user's address
#      operationId: updateAddress
#      x-acess-permission: user:write
#      parameters:
#        - name: userId
#          in: path
#          required: true
#          schema:
#            type: integer
#            format: int64
#        - name: addressId
#          in: path
#          required: true
#          schema:
#            type: integer
#            format: int64
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/AddAndUpdateAddressDto'
#      responses:
#        '200':
#          description: address updated
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/AddressDto'
    delete:
      summary: Remove an address from a user
      operationId: removeAddress
      x-acess-permission: user:write
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: addressId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: address deleted
        '404':
          description: address not founf
components:
  schemas:
    CreateAnyUserDto:
      x-java-type: ua.rivnegray.boardgames_shop.DTO.request.create.CreateAnyUserDto
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        roleIds:
          type: array
          items:
            type: integer
            format: int64
        email:
          type: string
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    CreateCustomerUserDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.request.create.CreateCustomerUserDto
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    UpdateEmailDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.request.update.UpdateEmailDto
      properties:
        email:
          type: string
    UpdateFullUserProfileDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.request.update.UpdateFullUserProfileDto
      properties:
        email:
          type: string
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    UpdatePasswordDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.request.update.UpdatePasswordDto
      properties:
        password:
          type: string
    UpdatePhoneDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.request.update.UpdatePhoneDto
      properties:
        phone:
          type: string
    UpdateRolesDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.request.update.UpdateRolesDto
      properties:
        roleIds:
          type: array
          items:
            type: integer
            format: int64
    UpdateUsernameDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.request.update.UpdateUsernameDto
      properties:
        username:
          type: string
    AddAndUpdateAddressDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.request.AddAndUpdateAddressDto
      properties:
        street:
          type: string
        houseNumber:
          type: string
        postalCode:
          type: string
        city:
          type: string
        country:
          type: string
    AddressDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.response.AddressDto
      properties:
        id:
          type: integer
          format: int64
        street:
          type: string
        houseNumber:
          type: string
        postalCode:
          type: string
        city:
          type: string
        country:
          type: string
    UserProfileDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.response.UserProfileDto
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
    UserPublicDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.response.UserPublicDto
      properties:
        username:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleDto'
        email:
          type: string
        phone:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/AddressDto'
    UserRoleDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.response.UserRoleDto
      properties:
        id:
          type: integer
          format: int64
        roleName:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/UserPermission'
    UserPermission:
      type: string
      x-java-type: ua.rivnegray.boardgames_shop.model.user.UserPermission
      enum:
        - user:read
        - user:write
        - admin:read
        - admin:write


