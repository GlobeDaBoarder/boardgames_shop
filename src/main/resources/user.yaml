openapi: 3.0.1
info:
  title: User API
  version: 1.0.0
paths:
  /users:
    get:
      summary: Get all users
      operationId: getAllUsers
      x-acess-permission: admin:read
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDto'
    post:
      summary: Create a new user
      operationId: createUser
      x-acess-permission: admin:write
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAndUpdateUserDto'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Invalid input

  /users/{id}:
    get:
      summary: Get user by ID
      operationId: getUserById
      x-acess-permission: admin:read
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
    put:
      summary: Update user
      operationId: updateUser
      x-acess-permission: admin:write
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAndUpdateUserDto'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '404':
          description: User not found
    delete:
      summary: Delete user
      operationId: deleteUser
      x-acess-permission: admin:write
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: User deleted
        '404':
          description: User not found
components:
  schemas:
    UserDto:
      x-java-type: ua.rivnegray.boardgames_shop.DTO.response.UserDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
        email:
          type: string
        phone:
          type: string
        imageUrl:
          type: string
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRoleDto'
    UserRoleDto:
      x-java-type: ua.rivnegray.boardgames_shop.DTO.response.UserRoleDto
      type: object
      properties:
        id:
          type: integer
          format: int64
        roleName:
          type: string
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/UserPermission'
    UserPermission:
      x-java-type: ua.rivnegray.boardgames_shop.model.user.UserPermission
      type: string
      enum:
        - user:read
        - user:write
        - admin:read
        - admin:write

    CreateAndUpdateUserDto:
      type: object
      x-java-type: ua.rivnegray.boardgames_shop.DTO.request.CreateAndUpdateUserDto
      properties:
        username:
          type: string
          example: "myUsername"
        password:
          type: string
          example: "myPassword"
        email:
          type: string
          format: email
          example: "email@example.com"
        phone:
          type: string
          format: phone
          example: "+11234567890"
        imageUrl:
          type: string
          format: uri
          example: "https://example.com/myImage.jpg"
        roleIds:
          type: array
          items:
            type: integer
          example: [ 1, 2, 3 ]
      required:
        - username
        - password
        - email
        - phone
        - imageUrl
        - roleIds
