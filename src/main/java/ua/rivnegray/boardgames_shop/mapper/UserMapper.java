package ua.rivnegray.boardgames_shop.mapper;

import org.mapstruct.Mapper;
import org.mapstruct.MappingTarget;
import ua.rivnegray.boardgames_shop.DTO.request.AddAndUpdateAddressDto;
import ua.rivnegray.boardgames_shop.DTO.response.AddressDto;
import ua.rivnegray.boardgames_shop.DTO.response.UserPublicDto;
import ua.rivnegray.boardgames_shop.DTO.response.UserRoleDto;
import ua.rivnegray.boardgames_shop.model.Address;
import ua.rivnegray.boardgames_shop.model.User;
import ua.rivnegray.boardgames_shop.model.UserRole;
import ua.rivnegray.boardgames_shop.repository.UserRoleRepository;

@Mapper(componentModel = "spring", uses = {UserRoleRepository.class})
public interface UserMapper {
//
//    @Named("mapToRoleSet")
//    default Set<UserRole> mapToRoleSet(Set<Long> ids, @Context UserRoleRepository roleService) {
//        if (ids == null) {
//            return null;
//        }
//        Set<UserRole> roles = new HashSet<>(ids.size());
//        for (Long id : ids) {
//            roles.add(roleService.findById(id).orElseThrow(() -> new RoleIdNotFoundException(id)));
//        }
//        return roles;
//    }
//
//    @Named("getCustomerRole")
//    default Set<UserRole> getCustomerRole(RegisterCustomerRequestDto registerCustomerRequestDto, @Context UserRoleRepository roleRepository) {
//        UserRole userRole = roleRepository.findUserRoleByRoleName("ROLE_CUSTOMER")
//                .orElseThrow(() -> new RoleNameNotFoundException("ROLE_CUSTOMER"));
//        Set<UserRole> roles = new HashSet<>();
//        roles.add(userRole);
//        return roles;
//    }


    UserPublicDto toUserPublicDto(User user);
//
//    @Mapping(source = "roleIds", target = "roles", qualifiedByName = "mapToRoleSet")
//    UserProfile toUserProfile(CreateAnyUserDto createAnyUserDto, @Context UserRoleRepository roleRepository);
//
//    /**
//     * This method is used to create a new user with ROLE_CUSTOMER
//     * Note that source = "." is basically the same as source = "createCustomerUserDto" and we do that because the role
//     * is generated by the @Named helper method called getCustomerRole
//     */
//    @Mapping(target = "roles", source = ".", qualifiedByName = "getCustomerRole")
//    UserProfile toUserProfile(RegisterCustomerRequestDto registerCustomerRequestDto, @Context UserRoleRepository roleRepository);
//
//    UserProfile toUserProfile(CreateUserProfileDto createUserProfileDto);
//
//    UserCredentials toUserCredentials(CreateAnyUserDto createAnyUserDto);
//
//    UserCredentials toUserCredentials(RegisterCustomerRequestDto createAnyUserDto);



    Address toAddress(AddAndUpdateAddressDto addAndUpdateAddressDto);

    AddressDto toAddressDto(Address addressToAdd);

    void updateAddress(@MappingTarget Address addressToUpdate, AddAndUpdateAddressDto updateAddressDto);

    UserRoleDto toUserRoleDto(UserRole userRole);

//    @Mapping(target = "email", ignore = true)
//    void updateUserProfile(@MappingTarget UserProfile userProfile, CreateUserProfileDto createUserProfileDto);
//
//    @Mapping(target = "email", ignore = true)
//    void updateUserProfile(@MappingTarget UserProfile userProfile, RegisterCustomerRequestDto registerCustomerRequestDto);

}
