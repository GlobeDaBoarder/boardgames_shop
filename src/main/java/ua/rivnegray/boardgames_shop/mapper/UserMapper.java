package ua.rivnegray.boardgames_shop.mapper;

import org.mapstruct.Context;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingTarget;
import org.mapstruct.Named;
import ua.rivnegray.boardgames_shop.DTO.request.AddAndUpdateAddressDto;
import ua.rivnegray.boardgames_shop.DTO.request.RegisterCustomerRequestDto;
import ua.rivnegray.boardgames_shop.DTO.request.create.CreateAnyUserDto;
import ua.rivnegray.boardgames_shop.DTO.request.create.CreateUserProfileDto;
import ua.rivnegray.boardgames_shop.DTO.response.AddressDto;
import ua.rivnegray.boardgames_shop.DTO.response.UserPublicDto;
import ua.rivnegray.boardgames_shop.DTO.response.UserRoleDto;
import ua.rivnegray.boardgames_shop.exceptions.notFoundExceptions.RoleIdNotFoundException;
import ua.rivnegray.boardgames_shop.exceptions.notFoundExceptions.RoleNameNotFoundException;
import ua.rivnegray.boardgames_shop.model.Address;
import ua.rivnegray.boardgames_shop.model.UserCredentials;
import ua.rivnegray.boardgames_shop.model.UserProfile;
import ua.rivnegray.boardgames_shop.model.UserRole;
import ua.rivnegray.boardgames_shop.repository.UserRoleRepository;

import java.util.HashSet;
import java.util.Set;

@Mapper(componentModel = "spring", uses = {UserRoleRepository.class})
public interface UserMapper {

    @Named("mapToRoleSet")
    default Set<UserRole> mapToRoleSet(Set<Long> ids, @Context UserRoleRepository roleService) {
        if (ids == null) {
            return null;
        }
        Set<UserRole> roles = new HashSet<>(ids.size());
        for (Long id : ids) {
            roles.add(roleService.findById(id).orElseThrow(() -> new RoleIdNotFoundException(id)));
        }
        return roles;
    }

    @Named("getCustomerRole")
    default Set<UserRole> getCustomerRole(RegisterCustomerRequestDto registerCustomerRequestDto, @Context UserRoleRepository roleRepository) {
        UserRole userRole = roleRepository.findUserRoleByRoleName("ROLE_CUSTOMER")
                .orElseThrow(() -> new RoleNameNotFoundException("ROLE_CUSTOMER"));
        Set<UserRole> roles = new HashSet<>();
        roles.add(userRole);
        return roles;
    }

    @Mapping(source = "userCredentials.username", target = "username")
    UserPublicDto toUserPublicDto(UserProfile userProfile);

    @Mapping(source = "roleIds", target = "roles", qualifiedByName = "mapToRoleSet")
    UserProfile toUserProfile(CreateAnyUserDto createAnyUserDto, @Context UserRoleRepository roleRepository);

    /**
     * This method is used to create a new user with ROLE_CUSTOMER
     * Note that source = "." is basically the same as source = "createCustomerUserDto" and we do that because the role
     * is generated by the @Named helper method called getCustomerRole
     */
    @Mapping(target = "roles", source = ".", qualifiedByName = "getCustomerRole")
    UserProfile toUserProfile(RegisterCustomerRequestDto registerCustomerRequestDto, @Context UserRoleRepository roleRepository);

    UserProfile toUserProfile(CreateUserProfileDto createUserProfileDto);

    UserCredentials toUserCredentials(CreateAnyUserDto createAnyUserDto);

    UserCredentials toUserCredentials(RegisterCustomerRequestDto createAnyUserDto);

    Address toAddress(AddAndUpdateAddressDto addAndUpdateAddressDto);

    AddressDto toAddressDto(Address addressToAdd);

    void updateAddress(@MappingTarget Address addressToUpdate, AddAndUpdateAddressDto updateAddressDto);

    UserRoleDto toUserRoleDto(UserRole userRole);

    @Mapping(target = "email", ignore = true)
    void updateUserProfile(@MappingTarget UserProfile userProfile, CreateUserProfileDto createUserProfileDto);

    @Mapping(target = "email", ignore = true)
    void updateUserProfile(@MappingTarget UserProfile userProfile, RegisterCustomerRequestDto registerCustomerRequestDto);
}
