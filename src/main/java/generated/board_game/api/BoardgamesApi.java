/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package generated.board_game.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import ua.rivnegray.boardgames_shop.DTO.request.create.CreateAndUpdateBoardGameDto;
import ua.rivnegray.boardgames_shop.DTO.request.create.CreateAndUpdateBoardGameGenreDto;
import ua.rivnegray.boardgames_shop.DTO.request.create.CreateAndUpdateBoardGameMechanicDto;
import ua.rivnegray.boardgames_shop.DTO.response.BoardGameDto;
import ua.rivnegray.boardgames_shop.DTO.response.BoardGameGenreDto;
import ua.rivnegray.boardgames_shop.DTO.response.BoardGameMechanicDto;
import ua.rivnegray.boardgames_shop.DTO.response.BoardGameSummaryDto;
import ua.rivnegray.boardgames_shop.DTO.response.CatalogResponseDto;
import ua.rivnegray.boardgames_shop.DTO.response.FilteringDataDto;
import ua.rivnegray.boardgames_shop.DTO.response.MinMaxDto;
import ua.rivnegray.boardgames_shop.model.SortType;

import java.util.List;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "boardgames", description = "the boardgames API")
public interface BoardgamesApi {

    default BoardgamesApiDelegate getDelegate() {
        return new BoardgamesApiDelegate() {};
    }

    /**
     * POST /boardgames : Add a new boardgame
     *
     * @param createAndUpdateBoardGameDto Boardgame to add (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "addBoardGame",
        summary = "Add a new boardgame",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_boardGame:create')")
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/boardgames",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BoardGameDto> addBoardGame(
        @Parameter(name = "CreateAndUpdateBoardGameDto", description = "Boardgame to add", required = true) @Valid @RequestBody CreateAndUpdateBoardGameDto createAndUpdateBoardGameDto
    ) {
        return getDelegate().addBoardGame(createAndUpdateBoardGameDto);
    }


    /**
     * POST /boardgames/genres : Add a new genre
     *
     * @param createAndUpdateBoardGameGenreDto Genre to add (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "addGenre",
        summary = "Add a new genre",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameGenreDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_genreAndMechanic:create')")
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/boardgames/genres",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BoardGameGenreDto> addGenre(
        @Parameter(name = "CreateAndUpdateBoardGameGenreDto", description = "Genre to add", required = true) @Valid @RequestBody CreateAndUpdateBoardGameGenreDto createAndUpdateBoardGameGenreDto
    ) {
        return getDelegate().addGenre(createAndUpdateBoardGameGenreDto);
    }


    /**
     * POST /boardgames/mechanics : Add a new mechanic
     *
     * @param createAndUpdateBoardGameMechanicDto Mechanic to add (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "addMechanic",
        summary = "Add a new mechanic",
        responses = {
            @ApiResponse(responseCode = "201", description = "Created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameMechanicDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_genreAndMechanic:create')")
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/boardgames/mechanics",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BoardGameMechanicDto> addMechanic(
        @Parameter(name = "CreateAndUpdateBoardGameMechanicDto", description = "Mechanic to add", required = true) @Valid @RequestBody CreateAndUpdateBoardGameMechanicDto createAndUpdateBoardGameMechanicDto
    ) {
        return getDelegate().addMechanic(createAndUpdateBoardGameMechanicDto);
    }


    /**
     * PUT /boardgames/archive/{id} : archive board game
     *
     * @param id ID of the board game to archive (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "archiveBoardGame",
        summary = "archive board game",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_boardGame:archiveAndUnarchive')")
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/boardgames/archive/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<BoardGameDto> archiveBoardGame(
        @Parameter(name = "id", description = "ID of the board game to archive", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().archiveBoardGame(id);
    }


    /**
     * DELETE /boardgames/{id} : Delete a boardgame
     *
     * @param id ID of the boardgame to delete (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deleteBoardGame",
        summary = "Delete a boardgame",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content", content = @Content),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_boardGame:delete')")
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/boardgames/{id}"
    )
    default ResponseEntity<Void> deleteBoardGame(
        @Parameter(name = "id", description = "ID of the boardgame to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().deleteBoardGame(id);
    }


    /**
     * DELETE /boardgames/genres/{id} : Delete a genre
     *
     * @param id ID of the genre to delete (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deleteGenre",
        summary = "Delete a genre",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content", content = @Content),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_genreAndMechanic:delete')")
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/boardgames/genres/{id}"
    )
    default ResponseEntity<Void> deleteGenre(
        @Parameter(name = "id", description = "ID of the genre to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().deleteGenre(id);
    }


    /**
     * DELETE /boardgames/mechanics/{id} : Delete a mechanic
     *
     * @param id ID of the mechanic to delete (required)
     * @return No Content (status code 204)
     *         or Not Found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deleteMechanic",
        summary = "Delete a mechanic",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content", content = @Content),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_genreAndMechanic:delete')")
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/boardgames/mechanics/{id}"
    )
    default ResponseEntity<Void> deleteMechanic(
        @Parameter(name = "id", description = "ID of the mechanic to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().deleteMechanic(id);
    }


    /**
     * GET /boardgames/archived/ : get all archived boardgames
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllArchivedBoardGames",
        summary = "get all archived boardgames",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BoardGameSummaryDto.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_boardGame:readArchived')")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boardgames/archived/",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BoardGameSummaryDto>> getAllArchivedBoardGames(
        
    ) {
        return getDelegate().getAllArchivedBoardGames();
    }


    /**
     * GET /boardgames : Get all boardgames
     *
     * @param search search in product name and description for some key words (optional)
     * @param filter  For Filtering you have to URL encode a DTO in Json format. here&#39;s an example of possible DTO: { \&quot;manufacturers\&quot;:[\&quot;Kosmos\&quot;], \&quot;minProductPrice\&quot;:90, \&quot;maxProductPrice\&quot;:110, \&quot;boardGameGenres\&quot;:[\&quot;Сімейні\&quot;,\&quot;Економіка\&quot;], \&quot;boardGameMechanics\&quot;:[\&quot;Конструювання колоди\&quot;,\&quot;Кооперативна гра\&quot;], \&quot;ageIntervals\&quot;:[\&quot;10-13\&quot;,\&quot;8-9\&quot;],\&quot;playerCounts\&quot;:[\&quot;2\&quot;,\&quot;3\&quot;,\&quot;4\&quot;,\&quot;5\&quot;], \&quot;minGameDuration\&quot;:30,\&quot;maxGameDuration\&quot;:130, \&quot;boardGameLanguages\&quot;:[\&quot;UKRAINIAN\&quot;,\&quot;ENGLISH\&quot;] }  (optional)
     * @param sort sort by: price (asc, desc), name (asc, desc), newest (optional)
     * @param page current page number (optional, default to 0)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllBoardGames",
        summary = "Get all boardgames",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = CatalogResponseDto.class))
            })
        }
    )
    @PreAuthorize("permitAll")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boardgames",
        produces = { "application/json" }
    )
    default ResponseEntity<CatalogResponseDto> getAllBoardGames(
        @Parameter(name = "search", description = "search in product name and description for some key words", in = ParameterIn.QUERY) @Valid @RequestParam(value = "search", required = false) String search,
        @Parameter(name = "filter", description = " For Filtering you have to URL encode a DTO in Json format. here's an example of possible DTO: { \"manufacturers\":[\"Kosmos\"], \"minProductPrice\":90, \"maxProductPrice\":110, \"boardGameGenres\":[\"Сімейні\",\"Економіка\"], \"boardGameMechanics\":[\"Конструювання колоди\",\"Кооперативна гра\"], \"ageIntervals\":[\"10-13\",\"8-9\"],\"playerCounts\":[\"2\",\"3\",\"4\",\"5\"], \"minGameDuration\":30,\"maxGameDuration\":130, \"boardGameLanguages\":[\"UKRAINIAN\",\"ENGLISH\"] } ", in = ParameterIn.QUERY) @Valid @RequestParam(value = "filter", required = false) String filter,
        @Parameter(name = "sort", description = "sort by: price (asc, desc), name (asc, desc), newest", in = ParameterIn.QUERY) @Valid @RequestParam(value = "sort", required = false) SortType sort,
        @Parameter(name = "page", description = "current page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "page", required = false, defaultValue = "0") Integer page
    ) {
        return getDelegate().getAllBoardGames(search, filter, sort, page);
    }


    /**
     * GET /boardgames/genres : Get all genres
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllGenres",
        summary = "Get all genres",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BoardGameGenreDto.class)))
            })
        }
    )
    @PreAuthorize("permitAll")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boardgames/genres",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BoardGameGenreDto>> getAllGenres(
        
    ) {
        return getDelegate().getAllGenres();
    }


    /**
     * GET /boardgames/mechanics : Get all mechanics
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getAllMechanics",
        summary = "Get all mechanics",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BoardGameMechanicDto.class)))
            })
        }
    )
    @PreAuthorize("permitAll")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boardgames/mechanics",
        produces = { "application/json" }
    )
    default ResponseEntity<List<BoardGameMechanicDto>> getAllMechanics(
        
    ) {
        return getDelegate().getAllMechanics();
    }


    /**
     * GET /boardgames/{id} : Get a boardgame by id
     *
     * @param id ID of the boardgame (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getBoardGameById",
        summary = "Get a boardgame by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content)
        }
    )
    @PreAuthorize("permitAll")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boardgames/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<BoardGameDto> getBoardGameById(
        @Parameter(name = "id", description = "ID of the boardgame", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().getBoardGameById(id);
    }


    /**
     * GET /boardgames/images/{filename} : Retrieve a specific image for a board game
     *
     * @param filename The filename of the image to retrieve (e.g., \&quot;1.png\&quot;) (required)
     * @return Image retrieved successfully (status code 200)
     *         or Bad Request (status code 400)
     *         or Boardgame or Image not found (status code 404)
     */
    @Operation(
        operationId = "getBoardGameImage",
        summary = "Retrieve a specific image for a board game",
        responses = {
            @ApiResponse(responseCode = "200", description = "Image retrieved successfully", content = {
                @Content(mediaType = "image/jpeg", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "image/png", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "image/jpg", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content),
            @ApiResponse(responseCode = "404", description = "Boardgame or Image not found", content = @Content)
        }
    )
    @PreAuthorize("permitAll")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boardgames/images/{filename}",
        produces = { "image/jpeg", "image/png", "image/jpg" }
    )
    default ResponseEntity<org.springframework.core.io.Resource> getBoardGameImage(
        @Parameter(name = "filename", description = "The filename of the image to retrieve (e.g., \"1.png\")", required = true, in = ParameterIn.PATH) @PathVariable("filename") String filename
    ) {
        return getDelegate().getBoardGameImage(filename);
    }


    /**
     * GET /boardgames/filteringData : Get all filtering data
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getFilteringData",
        summary = "Get all filtering data",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FilteringDataDto.class))
            })
        }
    )
    @PreAuthorize("permitAll")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boardgames/filteringData",
        produces = { "application/json" }
    )
    default ResponseEntity<FilteringDataDto> getFilteringData(
        
    ) {
        return getDelegate().getFilteringData();
    }


    /**
     * GET /boardgames/gameDurationBounds : Get min and max game durations from all games
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getGameDurationBounds",
        summary = "Get min and max game durations from all games",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MinMaxDto.class))
            })
        }
    )
    @PreAuthorize("permitAll")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boardgames/gameDurationBounds",
        produces = { "application/json" }
    )
    default ResponseEntity<MinMaxDto> getGameDurationBounds(
        
    ) {
        return getDelegate().getGameDurationBounds();
    }


    /**
     * GET /boardgames/genres/{id} : Get a genre by id
     *
     * @param id ID of the genre (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getGenreById",
        summary = "Get a genre by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameGenreDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content)
        }
    )
    @PreAuthorize("permitAll")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boardgames/genres/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<BoardGameGenreDto> getGenreById(
        @Parameter(name = "id", description = "ID of the genre", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().getGenreById(id);
    }


    /**
     * GET /boardgames/mechanics/{id} : Get a mechanic by id
     *
     * @param id ID of the mechanic (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getMechanicById",
        summary = "Get a mechanic by id",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameMechanicDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content)
        }
    )
    @PreAuthorize("permitAll")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boardgames/mechanics/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<BoardGameMechanicDto> getMechanicById(
        @Parameter(name = "id", description = "ID of the mechanic", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().getMechanicById(id);
    }


    /**
     * GET /boardgames/priceBounds : Get min and max price from all games
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getPriceBounds",
        summary = "Get min and max price from all games",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MinMaxDto.class))
            })
        }
    )
    @PreAuthorize("permitAll")
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/boardgames/priceBounds",
        produces = { "application/json" }
    )
    default ResponseEntity<MinMaxDto> getPriceBounds(
        
    ) {
        return getDelegate().getPriceBounds();
    }


    /**
     * PUT /boardgames/unarchive/{id} : unarchive board game
     *
     * @param id ID of the board game to unarchive (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "unarchiveBoardGame",
        summary = "unarchive board game",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_boardGame:archiveAndUnarchive')")
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/boardgames/unarchive/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<BoardGameDto> unarchiveBoardGame(
        @Parameter(name = "id", description = "ID of the board game to unarchive", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
    ) {
        return getDelegate().unarchiveBoardGame(id);
    }


    /**
     * PUT /boardgames/{id} : Update a boardgame
     *
     * @param id ID of the boardgame to update (required)
     * @param createAndUpdateBoardGameDto Boardgame to update (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "updateBoardGame",
        summary = "Update a boardgame",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_boardGame:update')")
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/boardgames/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BoardGameDto> updateBoardGame(
        @Parameter(name = "id", description = "ID of the boardgame to update", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CreateAndUpdateBoardGameDto", description = "Boardgame to update", required = true) @Valid @RequestBody CreateAndUpdateBoardGameDto createAndUpdateBoardGameDto
    ) {
        return getDelegate().updateBoardGame(id, createAndUpdateBoardGameDto);
    }


    /**
     * PUT /boardgames/genres/{id} : Update a genre
     *
     * @param id ID of the genre to update (required)
     * @param createAndUpdateBoardGameGenreDto Genre to update (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "updateGenre",
        summary = "Update a genre",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameGenreDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_genreAndMechanic:update')")
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/boardgames/genres/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BoardGameGenreDto> updateGenre(
        @Parameter(name = "id", description = "ID of the genre to update", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CreateAndUpdateBoardGameGenreDto", description = "Genre to update", required = true) @Valid @RequestBody CreateAndUpdateBoardGameGenreDto createAndUpdateBoardGameGenreDto
    ) {
        return getDelegate().updateGenre(id, createAndUpdateBoardGameGenreDto);
    }


    /**
     * PUT /boardgames/mechanics/{id} : Update a mechanic
     *
     * @param id ID of the mechanic to update (required)
     * @param createAndUpdateBoardGameMechanicDto Mechanic to update (required)
     * @return OK (status code 200)
     *         or Not Found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "updateMechanic",
        summary = "Update a mechanic",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameMechanicDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_genreAndMechanic:update')")
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/boardgames/mechanics/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<BoardGameMechanicDto> updateMechanic(
        @Parameter(name = "id", description = "ID of the mechanic to update", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CreateAndUpdateBoardGameMechanicDto", description = "Mechanic to update", required = true) @Valid @RequestBody CreateAndUpdateBoardGameMechanicDto createAndUpdateBoardGameMechanicDto
    ) {
        return getDelegate().updateMechanic(id, createAndUpdateBoardGameMechanicDto);
    }


    /**
     * POST /boardgames/{id}/image : Upload an image for a specific boardgame
     *
     * @param id The ID of the boardgame to which the image will be associated (required)
     * @param file  (optional)
     * @return Image uploaded and associated successfully (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Boardgame not found (status code 404)
     */
    @Operation(
        operationId = "uploadAndAddImage",
        summary = "Upload an image for a specific boardgame",
        responses = {
            @ApiResponse(responseCode = "201", description = "Image uploaded and associated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = @Content),
            @ApiResponse(responseCode = "404", description = "Boardgame not found", content = @Content)
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @PreAuthorize("hasAuthority('SCOPE_boardGame:create')")
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/boardgames/{id}/image",
        produces = { "application/json" },
        consumes = { "multipart/form-data" }
    )
    default ResponseEntity<BoardGameDto> uploadAndAddImage(
        @Parameter(name = "id", description = "The ID of the boardgame to which the image will be associated", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "file", description = "") @RequestPart(value = "file", required = false) MultipartFile file
    ) {
        return getDelegate().uploadAndAddImage(id, file);
    }

}
