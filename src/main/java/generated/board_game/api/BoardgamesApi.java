/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package generated.board_game.api;

import ua.rivnegray.boardgames_shop.DTO.response.BoardGameDto;
import ua.rivnegray.boardgames_shop.DTO.response.BoardGameGenreDto;
import ua.rivnegray.boardgames_shop.DTO.response.BoardGameMechanicDto;
import ua.rivnegray.boardgames_shop.DTO.request.create.CreateAndUpdateBoardGameDto;
import ua.rivnegray.boardgames_shop.DTO.request.create.CreateAndUpdateBoardGameGenreDto;
import ua.rivnegray.boardgames_shop.DTO.request.create.CreateAndUpdateBoardGameMechanicDto;
    import io.swagger.v3.oas.annotations.ExternalDocumentation;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.Parameter;
    import io.swagger.v3.oas.annotations.Parameters;
    import io.swagger.v3.oas.annotations.media.ArraySchema;
    import io.swagger.v3.oas.annotations.media.Content;
    import io.swagger.v3.oas.annotations.media.Schema;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.security.SecurityRequirement;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import io.swagger.v3.oas.annotations.enums.ParameterIn;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

    import javax.validation.Valid;
    import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.springframework.security.access.prepost.PreAuthorize;


@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-07-31T11:35:27.396090581+03:00[Europe/Kiev]")
    @Validated
    @Tag(name = "boardgames", description = "the boardgames API")
    public interface BoardgamesApi {

                default BoardgamesApiDelegate getDelegate() {
                return new BoardgamesApiDelegate() {};
                }

            /**
            * POST /boardgames : Add a new boardgame
            *
                * @param createAndUpdateBoardGameDto Boardgame to add (required)
            * @return Created (status code 201)
                *         or Bad Request (status code 400)
                *         or Unauthorized (status code 401)
            */
                @Operation(
                operationId = "addBoardGame",
                    summary = "Add a new boardgame",
                responses = {
                    @ApiResponse(responseCode = "201", description = "Created", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
                },
                security = {
                    @SecurityRequirement(name = "bearerAuth")
                }
                )
                        @PreAuthorize("hasAuthority('SCOPE_boardGame:create')")
            @RequestMapping(
            method = RequestMethod.POST,
            value = "/boardgames",
            produces = { "application/json" },
            consumes = { "application/json" }
            )
        default ResponseEntity<BoardGameDto> addBoardGame(
        @Parameter(name = "CreateAndUpdateBoardGameDto", description = "Boardgame to add", required = true) @Valid @RequestBody CreateAndUpdateBoardGameDto createAndUpdateBoardGameDto
            ) {
            return getDelegate().addBoardGame(createAndUpdateBoardGameDto);
            }


            /**
            * POST /boardgames/genres : Add a new genre
            *
                * @param createAndUpdateBoardGameGenreDto Genre to add (required)
            * @return Created (status code 201)
                *         or Bad Request (status code 400)
                *         or Unauthorized (status code 401)
            */
                @Operation(
                operationId = "addGenre",
                    summary = "Add a new genre",
                responses = {
                    @ApiResponse(responseCode = "201", description = "Created", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameGenreDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
                },
                security = {
                    @SecurityRequirement(name = "bearerAuth")
                }
                )
                        @PreAuthorize("hasAuthority('SCOPE_genreAndMechanic:create')")
            @RequestMapping(
            method = RequestMethod.POST,
            value = "/boardgames/genres",
            produces = { "application/json" },
            consumes = { "application/json" }
            )
        default ResponseEntity<BoardGameGenreDto> addGenre(
        @Parameter(name = "CreateAndUpdateBoardGameGenreDto", description = "Genre to add", required = true) @Valid @RequestBody CreateAndUpdateBoardGameGenreDto createAndUpdateBoardGameGenreDto
            ) {
            return getDelegate().addGenre(createAndUpdateBoardGameGenreDto);
            }


            /**
            * POST /boardgames/mechanics : Add a new mechanic
            *
                * @param createAndUpdateBoardGameMechanicDto Mechanic to add (required)
            * @return Created (status code 201)
                *         or Bad Request (status code 400)
                *         or Unauthorized (status code 401)
            */
                @Operation(
                operationId = "addMechanic",
                    summary = "Add a new mechanic",
                responses = {
                    @ApiResponse(responseCode = "201", description = "Created", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameMechanicDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = @Content),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
                },
                security = {
                    @SecurityRequirement(name = "bearerAuth")
                }
                )
                        @PreAuthorize("hasAuthority('SCOPE_genreAndMechanic:create')")
            @RequestMapping(
            method = RequestMethod.POST,
            value = "/boardgames/mechanics",
            produces = { "application/json" },
            consumes = { "application/json" }
            )
        default ResponseEntity<BoardGameMechanicDto> addMechanic(
        @Parameter(name = "CreateAndUpdateBoardGameMechanicDto", description = "Mechanic to add", required = true) @Valid @RequestBody CreateAndUpdateBoardGameMechanicDto createAndUpdateBoardGameMechanicDto
            ) {
            return getDelegate().addMechanic(createAndUpdateBoardGameMechanicDto);
            }


            /**
            * DELETE /boardgames/{id} : Delete a boardgame
            *
                * @param id ID of the boardgame to delete (required)
            * @return No Content (status code 204)
                *         or Not Found (status code 404)
                *         or Unauthorized (status code 401)
            */
                @Operation(
                operationId = "deleteBoardGame",
                    summary = "Delete a boardgame",
                responses = {
                    @ApiResponse(responseCode = "204", description = "No Content", content = @Content),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
                },
                security = {
                    @SecurityRequirement(name = "bearerAuth")
                }
                )
                        @PreAuthorize("hasAuthority('SCOPE_boardGame:delete')")
            @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/boardgames/{id}"
            )
        default ResponseEntity<Void> deleteBoardGame(
        @Parameter(name = "id", description = "ID of the boardgame to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
            ) {
            return getDelegate().deleteBoardGame(id);
            }


            /**
            * DELETE /boardgames/genres/{id} : Delete a genre
            *
                * @param id ID of the genre to delete (required)
            * @return No Content (status code 204)
                *         or Not Found (status code 404)
                *         or Unauthorized (status code 401)
            */
                @Operation(
                operationId = "deleteGenre",
                    summary = "Delete a genre",
                responses = {
                    @ApiResponse(responseCode = "204", description = "No Content", content = @Content),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
                },
                security = {
                    @SecurityRequirement(name = "bearerAuth")
                }
                )
                        @PreAuthorize("hasAuthority('SCOPE_genreAndMechanic:delete')")
            @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/boardgames/genres/{id}"
            )
        default ResponseEntity<Void> deleteGenre(
        @Parameter(name = "id", description = "ID of the genre to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
            ) {
            return getDelegate().deleteGenre(id);
            }


            /**
            * DELETE /boardgames/mechanics/{id} : Delete a mechanic
            *
                * @param id ID of the mechanic to delete (required)
            * @return No Content (status code 204)
                *         or Not Found (status code 404)
                *         or Unauthorized (status code 401)
            */
                @Operation(
                operationId = "deleteMechanic",
                    summary = "Delete a mechanic",
                responses = {
                    @ApiResponse(responseCode = "204", description = "No Content", content = @Content),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
                },
                security = {
                    @SecurityRequirement(name = "bearerAuth")
                }
                )
                        @PreAuthorize("hasAuthority('SCOPE_genreAndMechanic:delete')")
            @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/boardgames/mechanics/{id}"
            )
        default ResponseEntity<Void> deleteMechanic(
        @Parameter(name = "id", description = "ID of the mechanic to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
            ) {
            return getDelegate().deleteMechanic(id);
            }


            /**
            * GET /boardgames : Get all boardgames
            *
            * @return OK (status code 200)
            */
                @Operation(
                operationId = "getAllBoardGames",
                    summary = "Get all boardgames",
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BoardGameDto.class)))
                    })
                }
                )
                        //allow all
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/boardgames",
            produces = { "application/json" }
            )
        default ResponseEntity<List<BoardGameDto>> getAllBoardGames(
        
            ) {
            return getDelegate().getAllBoardGames();
            }


            /**
            * GET /boardgames/genres : Get all genres
            *
            * @return OK (status code 200)
            */
                @Operation(
                operationId = "getAllGenres",
                    summary = "Get all genres",
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BoardGameGenreDto.class)))
                    })
                }
                )
                        //allow all
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/boardgames/genres",
            produces = { "application/json" }
            )
        default ResponseEntity<List<BoardGameGenreDto>> getAllGenres(
        
            ) {
            return getDelegate().getAllGenres();
            }


            /**
            * GET /boardgames/mechanics : Get all mechanics
            *
            * @return OK (status code 200)
            */
                @Operation(
                operationId = "getAllMechanics",
                    summary = "Get all mechanics",
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BoardGameMechanicDto.class)))
                    })
                }
                )
                        //allow all
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/boardgames/mechanics",
            produces = { "application/json" }
            )
        default ResponseEntity<List<BoardGameMechanicDto>> getAllMechanics(
        
            ) {
            return getDelegate().getAllMechanics();
            }


            /**
            * GET /boardgames/{id} : Get a boardgame by id
            *
                * @param id ID of the boardgame (required)
            * @return OK (status code 200)
                *         or Not Found (status code 404)
            */
                @Operation(
                operationId = "getBoardGameById",
                    summary = "Get a boardgame by id",
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = @Content)
                }
                )
                        //allow all
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/boardgames/{id}",
            produces = { "application/json" }
            )
        default ResponseEntity<BoardGameDto> getBoardGameById(
        @Parameter(name = "id", description = "ID of the boardgame", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
            ) {
            return getDelegate().getBoardGameById(id);
            }


            /**
            * GET /boardgames/genres/{id} : Get a genre by id
            *
                * @param id ID of the genre (required)
            * @return OK (status code 200)
                *         or Not Found (status code 404)
            */
                @Operation(
                operationId = "getGenreById",
                    summary = "Get a genre by id",
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameGenreDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = @Content)
                }
                )
                        //allow all
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/boardgames/genres/{id}",
            produces = { "application/json" }
            )
        default ResponseEntity<BoardGameGenreDto> getGenreById(
        @Parameter(name = "id", description = "ID of the genre", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
            ) {
            return getDelegate().getGenreById(id);
            }


            /**
            * GET /boardgames/mechanics/{id} : Get a mechanic by id
            *
                * @param id ID of the mechanic (required)
            * @return OK (status code 200)
                *         or Not Found (status code 404)
            */
                @Operation(
                operationId = "getMechanicById",
                    summary = "Get a mechanic by id",
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameMechanicDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = @Content)
                }
                )
                        //allow all
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/boardgames/mechanics/{id}",
            produces = { "application/json" }
            )
        default ResponseEntity<BoardGameMechanicDto> getMechanicById(
        @Parameter(name = "id", description = "ID of the mechanic", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id
            ) {
            return getDelegate().getMechanicById(id);
            }


            /**
            * PUT /boardgames/{id} : Update a boardgame
            *
                * @param id ID of the boardgame to update (required)
                * @param createAndUpdateBoardGameDto Boardgame to update (required)
            * @return OK (status code 200)
                *         or Not Found (status code 404)
                *         or Unauthorized (status code 401)
            */
                @Operation(
                operationId = "updateBoardGame",
                    summary = "Update a boardgame",
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
                },
                security = {
                    @SecurityRequirement(name = "bearerAuth")
                }
                )
                        @PreAuthorize("hasAuthority('SCOPE_boardGame:update')")
            @RequestMapping(
            method = RequestMethod.PUT,
            value = "/boardgames/{id}",
            produces = { "application/json" },
            consumes = { "application/json" }
            )
        default ResponseEntity<BoardGameDto> updateBoardGame(
        @Parameter(name = "id", description = "ID of the boardgame to update", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CreateAndUpdateBoardGameDto", description = "Boardgame to update", required = true) @Valid @RequestBody CreateAndUpdateBoardGameDto createAndUpdateBoardGameDto
            ) {
            return getDelegate().updateBoardGame(id, createAndUpdateBoardGameDto);
            }


            /**
            * PUT /boardgames/genres/{id} : Update a genre
            *
                * @param id ID of the genre to update (required)
                * @param createAndUpdateBoardGameGenreDto Genre to update (required)
            * @return OK (status code 200)
                *         or Not Found (status code 404)
                *         or Unauthorized (status code 401)
            */
                @Operation(
                operationId = "updateGenre",
                    summary = "Update a genre",
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameGenreDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
                },
                security = {
                    @SecurityRequirement(name = "bearerAuth")
                }
                )
                        @PreAuthorize("hasAuthority('SCOPE_genreAndMechanic:update')")
            @RequestMapping(
            method = RequestMethod.PUT,
            value = "/boardgames/genres/{id}",
            produces = { "application/json" },
            consumes = { "application/json" }
            )
        default ResponseEntity<BoardGameGenreDto> updateGenre(
        @Parameter(name = "id", description = "ID of the genre to update", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CreateAndUpdateBoardGameGenreDto", description = "Genre to update", required = true) @Valid @RequestBody CreateAndUpdateBoardGameGenreDto createAndUpdateBoardGameGenreDto
            ) {
            return getDelegate().updateGenre(id, createAndUpdateBoardGameGenreDto);
            }


            /**
            * PUT /boardgames/mechanics/{id} : Update a mechanic
            *
                * @param id ID of the mechanic to update (required)
                * @param createAndUpdateBoardGameMechanicDto Mechanic to update (required)
            * @return OK (status code 200)
                *         or Not Found (status code 404)
                *         or Unauthorized (status code 401)
            */
                @Operation(
                operationId = "updateMechanic",
                    summary = "Update a mechanic",
                responses = {
                    @ApiResponse(responseCode = "200", description = "OK", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = BoardGameMechanicDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "Not Found", content = @Content),
                    @ApiResponse(responseCode = "401", description = "Unauthorized", content = @Content)
                },
                security = {
                    @SecurityRequirement(name = "bearerAuth")
                }
                )
                        @PreAuthorize("hasAuthority('SCOPE_genreAndMechanic:update')")
            @RequestMapping(
            method = RequestMethod.PUT,
            value = "/boardgames/mechanics/{id}",
            produces = { "application/json" },
            consumes = { "application/json" }
            )
        default ResponseEntity<BoardGameMechanicDto> updateMechanic(
        @Parameter(name = "id", description = "ID of the mechanic to update", required = true, in = ParameterIn.PATH) @PathVariable("id") Long id,
        @Parameter(name = "CreateAndUpdateBoardGameMechanicDto", description = "Mechanic to update", required = true) @Valid @RequestBody CreateAndUpdateBoardGameMechanicDto createAndUpdateBoardGameMechanicDto
            ) {
            return getDelegate().updateMechanic(id, createAndUpdateBoardGameMechanicDto);
            }

        }
