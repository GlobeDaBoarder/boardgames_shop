/**
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package generated.user.api;

import ua.rivnegray.boardgames_shop.DTO.request.AddAndUpdateAddressDto;
import ua.rivnegray.boardgames_shop.DTO.request.create.CreateAnyUserDto;
import ua.rivnegray.boardgames_shop.DTO.request.create.CreateCustomerUserDto;
import ua.rivnegray.boardgames_shop.DTO.request.update.UpdateEmailDto;
import ua.rivnegray.boardgames_shop.DTO.request.update.UpdateFullUserProfileDto;
import ua.rivnegray.boardgames_shop.DTO.request.update.UpdatePasswordDto;
import ua.rivnegray.boardgames_shop.DTO.request.update.UpdatePhoneDto;
import ua.rivnegray.boardgames_shop.DTO.request.update.UpdateUsernameDto;
import ua.rivnegray.boardgames_shop.DTO.response.UserPublicDto;
    import io.swagger.v3.oas.annotations.ExternalDocumentation;
    import io.swagger.v3.oas.annotations.Operation;
    import io.swagger.v3.oas.annotations.Parameter;
    import io.swagger.v3.oas.annotations.Parameters;
    import io.swagger.v3.oas.annotations.media.ArraySchema;
    import io.swagger.v3.oas.annotations.media.Content;
    import io.swagger.v3.oas.annotations.media.Schema;
    import io.swagger.v3.oas.annotations.responses.ApiResponse;
    import io.swagger.v3.oas.annotations.security.SecurityRequirement;
    import io.swagger.v3.oas.annotations.tags.Tag;
    import io.swagger.v3.oas.annotations.enums.ParameterIn;
    import org.springframework.http.ResponseEntity;
    import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

    import javax.validation.Valid;
    import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Generated;
import org.springframework.security.access.prepost.PreAuthorize;


@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-29T19:15:58.460159669+03:00[Europe/Kiev]")
    @Validated
    @Tag(name = "users", description = "the users API")
    public interface UsersApi {

                default UsersApiDelegate getDelegate() {
                return new UsersApiDelegate() {};
                }

            /**
            * POST /users/{userId}/address : Add an address to a user
            *
                * @param userId  (required)
                * @param addAndUpdateAddressDto  (required)
            * @return address added (status code 200)
            */
                @Operation(
                operationId = "addAddress",
                    summary = "Add an address to a user",
                responses = {
                    @ApiResponse(responseCode = "200", description = "address added")
                }
                )
            @PreAuthorize("hasAuthority('user:write')")
            @RequestMapping(
            method = RequestMethod.POST,
            value = "/users/{userId}/address",
            consumes = { "application/json" }
            )
        default ResponseEntity<Void> addAddress(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "AddAndUpdateAddressDto", description = "", required = true) @Valid @RequestBody AddAndUpdateAddressDto addAndUpdateAddressDto
            ) {
            return getDelegate().addAddress(userId, addAndUpdateAddressDto);
            }


            /**
            * POST /users/customer : Create a new customer user
            *
                * @param createCustomerUserDto  (required)
            * @return User created (status code 201)
            */
                @Operation(
                operationId = "createCustomerUser",
                    summary = "Create a new customer user",
                responses = {
                    @ApiResponse(responseCode = "201", description = "User created", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = UserPublicDto.class))
                    })
                }
                )
            @PreAuthorize("hasAuthority('user:write')")
            @RequestMapping(
            method = RequestMethod.POST,
            value = "/users/customer",
            produces = { "application/json" },
            consumes = { "application/json" }
            )
        default ResponseEntity<UserPublicDto> createCustomerUser(
        @Parameter(name = "CreateCustomerUserDto", description = "", required = true) @Valid @RequestBody CreateCustomerUserDto createCustomerUserDto
            ) {
            return getDelegate().createCustomerUser(createCustomerUserDto);
            }


            /**
            * POST /users : Create a new user with specified roles
            *
                * @param createAnyUserDto  (required)
            * @return User created (status code 201)
            */
                @Operation(
                operationId = "createSpecifiedUser",
                    summary = "Create a new user with specified roles",
                responses = {
                    @ApiResponse(responseCode = "201", description = "User created", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = UserPublicDto.class))
                    })
                }
                )
            @PreAuthorize("hasAuthority('admin:write')")
            @RequestMapping(
            method = RequestMethod.POST,
            value = "/users",
            produces = { "application/json" },
            consumes = { "application/json" }
            )
        default ResponseEntity<UserPublicDto> createSpecifiedUser(
        @Parameter(name = "CreateAnyUserDto", description = "", required = true) @Valid @RequestBody CreateAnyUserDto createAnyUserDto
            ) {
            return getDelegate().createSpecifiedUser(createAnyUserDto);
            }


            /**
            * DELETE /users/{userId} : Delete a user by ID
            *
                * @param userId  (required)
            * @return User deleted (status code 204)
                *         or User not found (status code 404)
            */
                @Operation(
                operationId = "deleteUser",
                    summary = "Delete a user by ID",
                responses = {
                    @ApiResponse(responseCode = "204", description = "User deleted"),
                    @ApiResponse(responseCode = "404", description = "User not found")
                }
                )
            @PreAuthorize("hasAuthority('admin:write')")
            @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/users/{userId}"
            )
        default ResponseEntity<Void> deleteUser(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
            ) {
            return getDelegate().deleteUser(userId);
            }


            /**
            * GET /users : Get all users
            *
            * @return successful operation (status code 200)
            */
                @Operation(
                operationId = "getAllUsersPublicInfo",
                    summary = "Get all users",
                responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                        @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserPublicDto.class)))
                    })
                }
                )
            @PreAuthorize("hasAuthority('admin:read')")
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/users",
            produces = { "application/json" }
            )
        default ResponseEntity<List<UserPublicDto>> getAllUsersPublicInfo(
        
            ) {
            return getDelegate().getAllUsersPublicInfo();
            }


            /**
            * GET /users/{userId} : Get a user by ID
            *
                * @param userId  (required)
            * @return successful operation (status code 200)
                *         or User not found (status code 404)
            */
                @Operation(
                operationId = "getUserPublicInfoById",
                    summary = "Get a user by ID",
                responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = UserPublicDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "User not found")
                }
                )
            @PreAuthorize("hasAuthority('admin:read')")
            @RequestMapping(
            method = RequestMethod.GET,
            value = "/users/{userId}",
            produces = { "application/json" }
            )
        default ResponseEntity<UserPublicDto> getUserPublicInfoById(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId
            ) {
            return getDelegate().getUserPublicInfoById(userId);
            }


            /**
            * DELETE /users/{userId}/address/{addressId} : Remove an address from a user
            *
                * @param userId  (required)
                * @param addressId  (required)
            * @return address deleted (status code 204)
                *         or address not founf (status code 404)
            */
                @Operation(
                operationId = "removeAddress",
                    summary = "Remove an address from a user",
                responses = {
                    @ApiResponse(responseCode = "204", description = "address deleted"),
                    @ApiResponse(responseCode = "404", description = "address not founf")
                }
                )
            @PreAuthorize("hasAuthority('user:write')")
            @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/users/{userId}/address/{addressId}"
            )
        default ResponseEntity<Void> removeAddress(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "addressId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("addressId") Long addressId
            ) {
            return getDelegate().removeAddress(userId, addressId);
            }


            /**
            * PUT /users/{userId}/address : Update a user&#39;s address
            *
                * @param userId  (required)
                * @param addAndUpdateAddressDto  (required)
            * @return address updated (status code 200)
            */
                @Operation(
                operationId = "updateAddress",
                    summary = "Update a user's address",
                responses = {
                    @ApiResponse(responseCode = "200", description = "address updated")
                }
                )
            @PreAuthorize("hasAuthority('user:write')")
            @RequestMapping(
            method = RequestMethod.PUT,
            value = "/users/{userId}/address",
            consumes = { "application/json" }
            )
        default ResponseEntity<Void> updateAddress(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "AddAndUpdateAddressDto", description = "", required = true) @Valid @RequestBody AddAndUpdateAddressDto addAndUpdateAddressDto
            ) {
            return getDelegate().updateAddress(userId, addAndUpdateAddressDto);
            }


            /**
            * PUT /users/{userId}/email : Update a user&#39;s email
            *
                * @param userId  (required)
                * @param updateEmailDto  (required)
            * @return email updated (status code 200)
            */
                @Operation(
                operationId = "updateEmail",
                    summary = "Update a user's email",
                responses = {
                    @ApiResponse(responseCode = "200", description = "email updated")
                }
                )
            @PreAuthorize("hasAuthority('user:write')")
            @RequestMapping(
            method = RequestMethod.PUT,
            value = "/users/{userId}/email",
            consumes = { "application/json" }
            )
        default ResponseEntity<Void> updateEmail(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "UpdateEmailDto", description = "", required = true) @Valid @RequestBody UpdateEmailDto updateEmailDto
            ) {
            return getDelegate().updateEmail(userId, updateEmailDto);
            }


            /**
            * PUT /users/{userId} : Update a user&#39;s full profile
            *
                * @param userId  (required)
                * @param updateFullUserProfileDto  (required)
            * @return User updated (status code 200)
                *         or User not found (status code 404)
            */
                @Operation(
                operationId = "updateFullUserProfile",
                    summary = "Update a user's full profile",
                responses = {
                    @ApiResponse(responseCode = "200", description = "User updated", content = {
                        @Content(mediaType = "application/json", schema = @Schema(implementation = UserPublicDto.class))
                    }),
                    @ApiResponse(responseCode = "404", description = "User not found")
                }
                )
            @PreAuthorize("hasAuthority('user:write')")
            @RequestMapping(
            method = RequestMethod.PUT,
            value = "/users/{userId}",
            produces = { "application/json" },
            consumes = { "application/json" }
            )
        default ResponseEntity<UserPublicDto> updateFullUserProfile(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "UpdateFullUserProfileDto", description = "", required = true) @Valid @RequestBody UpdateFullUserProfileDto updateFullUserProfileDto
            ) {
            return getDelegate().updateFullUserProfile(userId, updateFullUserProfileDto);
            }


            /**
            * PUT /users/{userId}/password : Update a user&#39;s password
            *
                * @param userId  (required)
                * @param updatePasswordDto  (required)
            * @return password updated (status code 200)
            */
                @Operation(
                operationId = "updatePassword",
                    summary = "Update a user's password",
                responses = {
                    @ApiResponse(responseCode = "200", description = "password updated")
                }
                )
            @PreAuthorize("hasAuthority('user:write')")
            @RequestMapping(
            method = RequestMethod.PUT,
            value = "/users/{userId}/password",
            consumes = { "application/json" }
            )
        default ResponseEntity<Void> updatePassword(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "UpdatePasswordDto", description = "", required = true) @Valid @RequestBody UpdatePasswordDto updatePasswordDto
            ) {
            return getDelegate().updatePassword(userId, updatePasswordDto);
            }


            /**
            * PUT /users/{userId}/phone : Update a user&#39;s phone
            *
                * @param userId  (required)
                * @param updatePhoneDto  (required)
            * @return phone number updated (status code 200)
            */
                @Operation(
                operationId = "updatePhone",
                    summary = "Update a user's phone",
                responses = {
                    @ApiResponse(responseCode = "200", description = "phone number updated")
                }
                )
            @PreAuthorize("hasAuthority('user:write')")
            @RequestMapping(
            method = RequestMethod.PUT,
            value = "/users/{userId}/phone",
            consumes = { "application/json" }
            )
        default ResponseEntity<Void> updatePhone(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "UpdatePhoneDto", description = "", required = true) @Valid @RequestBody UpdatePhoneDto updatePhoneDto
            ) {
            return getDelegate().updatePhone(userId, updatePhoneDto);
            }


            /**
            * PUT /users/{userId}/username : Update a user&#39;s username
            *
                * @param userId  (required)
                * @param updateUsernameDto  (required)
            * @return username updated (status code 200)
            */
                @Operation(
                operationId = "updateUsername",
                    summary = "Update a user's username",
                responses = {
                    @ApiResponse(responseCode = "200", description = "username updated")
                }
                )
            @PreAuthorize("hasAuthority('user:write')")
            @RequestMapping(
            method = RequestMethod.PUT,
            value = "/users/{userId}/username",
            consumes = { "application/json" }
            )
        default ResponseEntity<Void> updateUsername(
        @Parameter(name = "userId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("userId") Long userId,
        @Parameter(name = "UpdateUsernameDto", description = "", required = true) @Valid @RequestBody UpdateUsernameDto updateUsernameDto
            ) {
            return getDelegate().updateUsername(userId, updateUsernameDto);
            }

        }
